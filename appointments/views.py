from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from account.models import DoctorDetails, PatientDetails
from .models import Appointment
from .forms import AppointmentRequestForm


@login_required
def appointments_patient_view(request):
    """
    Renders the appointments view for patients.
    This view checks if the user has a 'patient' role. If not, it redirects
    the user to the home page with an error message. If the user is a patient,
    it retrieves all doctor details and renders the 'appointments_patient_view.html'
    template with the list of doctors.
    Args:
        request (HttpRequest): The HTTP request object.
    Returns:
        HttpResponse: The rendered appointments view for patients or a redirect
        to the home page if the user is not a patient.
    """

    if request.user.role != 'patient':
        messages.error(request, "Only patients has access to this page.")
        return redirect('home')

    doctors = DoctorDetails.objects.all()

    return render(request, "patient/appointments_patient_view.html", {'doctors': doctors})


@login_required
def appointments_doctor_view(request):
    """
    Handles the view for doctor appointments.
    This view checks if the user has the role of 'doctor'. If not, it displays an error message
    and redirects the user to the home page. If the user is a doctor, it renders the 
    'appointment_doctor_view.html' template.
    Args:
        request (HttpRequest): The HTTP request object containing metadata about the request.
    Returns:
        HttpResponse: The HTTP response object with the rendered template or a redirect.
    """

    if request.user.role != 'doctor':
        messages.error(request, "Only doctor has access to this page.")
        return redirect('home')

    return render(request, "doctor/appointment_doctor_view.html")


@login_required
def appointments_view(request):
    """
    Handles the appointment view based on the user's role.
    Depending on whether the user is a patient or a doctor, this function
    redirects the request to the appropriate view function for handling
    appointments. If the user is neither a patient nor a doctor, they are
    redirected to the home page.
    Args:
        request (HttpRequest): The HTTP request object containing user information.
    Returns:
        HttpResponse: The response object generated by the appropriate view function
                      or a redirect to the home page.
    """

    if request.user.role == 'patient':
        return appointments_patient_view(request)
    elif request.user.role == 'doctor':
        return appointments_doctor_view(request)

    return redirect('home')


@login_required
def request_appointment(request, doctor_id):
    """
    Handles the appointment request process for patients.
    This view function performs the following tasks:
    1. Checks if the user is a patient. If not, an error message is displayed and the user is redirected.
    2. Verifies if the patient's personal details are filled out. If not, an error message is displayed and the user is redirected.
    3. Retrieves the doctor and patient details based on the provided doctor_id and the logged-in user.
    4. If the request method is POST, it processes the appointment request form. If the form is valid, the appointment is saved and a success message is displayed.
    5. If the request method is not POST, it initializes the appointment request form with the doctor's details.
    Args:
        request (HttpRequest): The HTTP request object.
        doctor_id (int): The ID of the doctor for whom the appointment is being requested.
    Returns:
        HttpResponse: The rendered template with the appointment request form or a redirect response.
    """

    if request.user.role != 'patient':
        messages.error(request, "Only patients has access to this page.")
        return redirect('appointments')

    if not PatientDetails.objects.filter(user=request.user).exit():
        messages.add_message(
            request, messages.ERROR, "Unauthorized access. Please fill out your Personal Details Form first."
        )
        return redirect('patient-form')

    doctor = get_object_or_404(DoctorDetails, id=doctor_id)
    patient = get_object_or_404(PatientDetails, user=request.user)

    if request.method == 'POST':
        form = AppointmentRequestForm(request.POST)
        if form.is_valid():
            appointment = form.save(commit=False)
            appointment.patient = patient
            appointment.doctor = doctor
            appointment.save()
            messages.add_message(
                request, messages.SUCCESS, f"Your appointment request with Dr. {doctor.first_name} {doctor.last_name} has been sent.")
            return redirect('appointments')
    else:
        form = AppointmentRequestForm(initial={'doctor': doctor})

    return render(request, "form/request_appointment.html", {'form': form, 'doctor': doctor})
